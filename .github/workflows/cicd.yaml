name: ArgoCD Autopilot DevSecOps Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

permissions:
  contents: read
  pull-requests: write
  checks: write
  security-events: write

env:
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  KUBECONFIG: /tmp/kubeconfig

jobs:
  pipeline-init:
    name: Initialize Pipeline
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.info.outputs.branch }}
      commit: ${{ steps.info.outputs.commit }}
      timestamp: ${{ steps.info.outputs.timestamp }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate Pipeline Info
        id: info
        run: |
          echo "branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          echo "commit=${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "timestamp=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT
          
          echo "# 🚀 ArgoCD Autopilot DevSecOps Pipeline" > pipeline-info.md
          echo "" >> pipeline-info.md
          echo "| Field | Value |" >> pipeline-info.md
          echo "|-------|-------|" >> pipeline-info.md
          echo "| **Trigger** | ${{ github.event_name }} |" >> pipeline-info.md
          echo "| **Branch** | ${{ github.ref_name }} |" >> pipeline-info.md
          echo "| **Commit** | \`${{ github.sha }}\` |" >> pipeline-info.md
          echo "| **Repository** | ArgoCD Autopilot Configuration |" >> pipeline-info.md
          echo "| **Timestamp** | $(date -u +%Y-%m-%dT%H:%M:%SZ) |" >> pipeline-info.md

      - name: Upload Pipeline Info
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-info
          path: pipeline-info.md
          retention-days: 30

  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    needs: pipeline-init
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Tools
        run: |
          # Install linting tools
          pip install --upgrade pip
          pip install yamllint
          npm install -g markdownlint-cli
          
          # Install kubectl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/

      - name: YAML Validation & Linting
        run: |
          echo "# 🧹 Code Quality Report" > quality-report.md
          echo "" >> quality-report.md
          
          # YAML Linting
          echo "## YAML Linting Results" >> quality-report.md
          echo "\`\`\`" >> quality-report.md
          
          yaml_issues=0
          find . -name "*.yaml" -o -name "*.yml" | while read file; do
            if ! yamllint "$file" 2>/dev/null; then
              echo "❌ Issues in: $file" >> quality-report.md
              yamllint "$file" 2>&1 | head -5 >> quality-report.md
              yaml_issues=$((yaml_issues + 1))
            else
              echo "✅ Clean: $file" >> quality-report.md
            fi
          done
          
          echo "\`\`\`" >> quality-report.md
          echo "" >> quality-report.md

      - name: Kubernetes Manifest Validation
        run: |
          echo "## Kubernetes Manifest Validation" >> quality-report.md
          echo "\`\`\`" >> quality-report.md
          
          manifest_issues=0
          find . -name "*.yaml" -o -name "*.yml" | while read file; do
            if kubectl apply --dry-run=client -f "$file" >/dev/null 2>&1; then
              echo "✅ Valid K8s manifest: $file" >> quality-report.md
            else
              echo "❌ Invalid K8s manifest: $file" >> quality-report.md
              kubectl apply --dry-run=client -f "$file" 2>&1 | head -3 >> quality-report.md
              manifest_issues=$((manifest_issues + 1))
            fi
          done
          
          echo "\`\`\`" >> quality-report.md

      - name: Upload Quality Report
        uses: actions/upload-artifact@v4
        with:
          name: quality-report
          path: quality-report.md

  argocd-structure:
    name: ArgoCD Structure Validation
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/

      - name: Validate ArgoCD Autopilot Structure
        run: |
          echo "# 🏗️ ArgoCD Autopilot Structure Report" > structure-report.md
          echo "" >> structure-report.md
          
          structure_score=0
          total_checks=6
          
          echo "## Directory Structure Check" >> structure-report.md
          echo "| Component | Status | Score |" >> structure-report.md
          echo "|-----------|--------|-------|" >> structure-report.md
          
          # Check bootstrap directory
          if [ -d "bootstrap" ]; then
            echo "| bootstrap/ | ✅ Present | 1/1 |" >> structure-report.md
            structure_score=$((structure_score + 1))
          else
            echo "| bootstrap/ | ❌ Missing | 0/1 |" >> structure-report.md
          fi
          
          # Check cluster-resources
          if [ -d "bootstrap/cluster-resources" ]; then
            echo "| cluster-resources/ | ✅ Present | 1/1 |" >> structure-report.md
            structure_score=$((structure_score + 1))
          else
            echo "| cluster-resources/ | ❌ Missing | 0/1 |" >> structure-report.md
          fi
          
          # Check in-cluster
          if [ -d "bootstrap/cluster-resources/in-cluster" ]; then
            echo "| in-cluster/ | ✅ Present | 1/1 |" >> structure-report.md
            structure_score=$((structure_score + 1))
          else
            echo "| in-cluster/ | ❌ Missing | 0/1 |" >> structure-report.md
          fi
          
          # Check for ArgoCD applications
          app_count=$(find bootstrap/cluster-resources/in-cluster -name "*.yaml" -o -name "*.yml" 2>/dev/null | wc -l)
          if [ "$app_count" -gt 0 ]; then
            echo "| Applications | ✅ Found ($app_count) | 1/1 |" >> structure-report.md
            structure_score=$((structure_score + 1))
          else
            echo "| Applications | ⚠️ None Found | 0/1 |" >> structure-report.md
          fi
          
          # Check kustomization files
          kust_count=$(find . -name "kustomization.yaml" 2>/dev/null | wc -l)
          if [ "$kust_count" -gt 0 ]; then
            echo "| Kustomizations | ✅ Found ($kust_count) | 1/1 |" >> structure-report.md
            structure_score=$((structure_score + 1))
          else
            echo "| Kustomizations | ⚠️ None Found | 0/1 |" >> structure-report.md
          fi
          
          # Check overall structure health
          health_percent=$((structure_score * 100 / total_checks))
          if [ "$health_percent" -ge 80 ]; then
            echo "| **Overall Health** | ✅ Good ($health_percent%) | $structure_score/$total_checks |" >> structure-report.md
          else
            echo "| **Overall Health** | ⚠️ Needs Attention ($health_percent%) | $structure_score/$total_checks |" >> structure-report.md
          fi
          
          echo "" >> structure-report.md
          echo "## Kustomization Validation" >> structure-report.md
          echo "\`\`\`" >> structure-report.md
          
          find . -name "kustomization.yaml" 2>/dev/null | while read kust; do
            kust_dir=$(dirname "$kust")
            if kubectl apply --dry-run=client -k "$kust_dir" >/dev/null 2>&1; then
              echo "✅ Valid kustomization: $kust" >> structure-report.md
            else
              echo "❌ Invalid kustomization: $kust" >> structure-report.md
            fi
          done
          
          echo "\`\`\`" >> structure-report.md

      - name: Upload Structure Report
        uses: actions/upload-artifact@v4
        with:
          name: structure-report
          path: structure-report.md

  sast-security:
    name: SAST Security Analysis
    runs-on: ubuntu-latest
    needs: argocd-structure
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Security Tools
        run: |
          # Install Semgrep
          pip install semgrep
          
          # Install Trivy
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b . v0.50.0
          
          # Install Snyk (optional)
          npm install -g snyk || true

      - name: Run SAST Security Scans
        run: |
          echo "# 🔍 SAST Security Analysis Report" > sast-report.md
          echo "" >> sast-report.md
          
          security_score=0
          total_scans=4
          
          echo "## Security Scan Results" >> sast-report.md
          echo "| Scan Type | Status | Findings |" >> sast-report.md
          echo "|-----------|--------|----------|" >> sast-report.md
          
          # Code Security Scan (Semgrep)
          echo "### Running Semgrep Code Security Scan..." >> sast-report.md
          if semgrep --config=auto --severity=ERROR --severity=WARNING . --json > semgrep-results.json 2>/dev/null; then
            findings=$(jq '.results | length' semgrep-results.json 2>/dev/null || echo "0")
            if [ "$findings" -eq 0 ]; then
              echo "| Code Security | ✅ Clean | 0 issues |" >> sast-report.md
              security_score=$((security_score + 1))
            else
              echo "| Code Security | ⚠️ Issues Found | $findings issues |" >> sast-report.md
            fi
          else
            echo "| Code Security | ❌ Scan Failed | - |" >> sast-report.md
          fi
          
          # Infrastructure as Code Security
          echo "### Running Trivy IaC Security Scan..." >> sast-report.md
          if ./trivy config . --severity HIGH,CRITICAL --format json > trivy-iac.json 2>/dev/null; then
            iac_issues=$(jq '.Results[].Misconfigurations | length' trivy-iac.json 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
            if [ "$iac_issues" -eq 0 ]; then
              echo "| IaC Security | ✅ Clean | 0 misconfigurations |" >> sast-report.md
              security_score=$((security_score + 1))
            else
              echo "| IaC Security | ⚠️ Issues Found | $iac_issues misconfigurations |" >> sast-report.md
            fi
          else
            echo "| IaC Security | ❌ Scan Failed | - |" >> sast-report.md
          fi
          
          # Secret Detection
          echo "### Running Secret Detection..." >> sast-report.md
          if ./trivy fs . --scanners secret --format json > trivy-secrets.json 2>/dev/null; then
            secret_count=$(jq '.Results[].Secrets | length' trivy-secrets.json 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
            if [ "$secret_count" -eq 0 ]; then
              echo "| Secret Detection | ✅ Clean | 0 secrets |" >> sast-report.md
              security_score=$((security_score + 1))
            else
              echo "| Secret Detection | 🔴 Secrets Found | $secret_count secrets |" >> sast-report.md
            fi
          else
            echo "| Secret Detection | ❌ Scan Failed | - |" >> sast-report.md
          fi
          
          # Dependency Vulnerability Scan
          echo "### Running Dependency Scan..." >> sast-report.md
          deps_clean=true
          
          if [ -f "package.json" ]; then
            if ! snyk test --json > snyk-results.json 2>/dev/null; then
              deps_clean=false
            fi
          fi
          
          if [ -f "requirements.txt" ] || [ -f "go.mod" ]; then
            if ! ./trivy fs . --scanners vuln --format json > trivy-deps.json 2>/dev/null; then
              deps_clean=false
            fi
          fi
          
          if [ "$deps_clean" = true ]; then
            echo "| Dependencies | ✅ Clean | 0 vulnerabilities |" >> sast-report.md
            security_score=$((security_score + 1))
          else
            echo "| Dependencies | ⚠️ Vulnerabilities | Check logs |" >> sast-report.md
          fi
          
          # Security Score
          security_percent=$((security_score * 100 / total_scans))
          if [ "$security_percent" -ge 75 ]; then
            echo "| **Security Score** | ✅ Good ($security_percent%) | $security_score/$total_scans |" >> sast-report.md
          else
            echo "| **Security Score** | ⚠️ Needs Review ($security_percent%) | $security_score/$total_scans |" >> sast-report.md
          fi

      - name: Upload SAST Report
        uses: actions/upload-artifact@v4
        with:
          name: sast-report
          path: sast-report.md

  dast-security:
    name: DAST Security Analysis
    runs-on: ubuntu-latest
    needs: sast-security
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Analysis Tools
        run: |
          pip install pyyaml requests
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/

      - name: Run DAST Configuration Analysis
        run: |
          echo "# 🌐 DAST Configuration Security Report" > dast-report.md
          echo "" >> dast-report.md
          
          runtime_score=0
          total_checks=5
          
          echo "## Runtime Security Configuration" >> dast-report.md
          echo "| Security Control | Status | Findings |" >> dast-report.md
          echo "|------------------|--------|----------|" >> dast-report.md
          
          # Service Exposure Analysis
          exposed_services=$(find . -name "*.yaml" -o -name "*.yml" | xargs grep -l "type.*LoadBalancer\|type.*NodePort" | wc -l)
          if [ "$exposed_services" -eq 0 ]; then
            echo "| Service Exposure | ✅ Secure | No external exposure |" >> dast-report.md
            runtime_score=$((runtime_score + 1))
          else
            echo "| Service Exposure | ⚠️ Review Needed | $exposed_services external services |" >> dast-report.md
          fi
          
          # TLS Configuration
          insecure_tls=$(find . -name "*.yaml" -o -name "*.yml" | xargs grep -l "tls.*false\|ssl.*false" | wc -l)
          if [ "$insecure_tls" -eq 0 ]; then
            echo "| TLS Configuration | ✅ Secure | No insecure TLS |" >> dast-report.md
            runtime_score=$((runtime_score + 1))
          else
            echo "| TLS Configuration | ⚠️ Issues Found | $insecure_tls insecure configs |" >> dast-report.md
          fi
          
          # Network Policies
          network_policies=$(find . -name "*.yaml" -o -name "*.yml" | xargs grep -l "kind.*NetworkPolicy" | wc -l)
          if [ "$network_policies" -gt 0 ]; then
            echo "| Network Policies | ✅ Implemented | $network_policies policies |" >> dast-report.md
            runtime_score=$((runtime_score + 1))
          else
            echo "| Network Policies | ⚠️ Missing | Consider implementation |" >> dast-report.md
          fi
          
          # RBAC Configuration
          rbac_configs=$(find . -name "*.yaml" -o -name "*.yml" | xargs grep -l "kind.*Role\|kind.*ClusterRole\|kind.*RoleBinding" | wc -l)
          if [ "$rbac_configs" -gt 0 ]; then
            echo "| RBAC Controls | ✅ Configured | $rbac_configs RBAC resources |" >> dast-report.md
            runtime_score=$((runtime_score + 1))
          else
            echo "| RBAC Controls | ⚠️ Limited | Review access controls |" >> dast-report.md
          fi
          
          # Security Contexts
          security_contexts=$(find . -name "*.yaml" -o -name "*.yml" | xargs grep -l "securityContext" | wc -l)
          if [ "$security_contexts" -gt 0 ]; then
            echo "| Security Contexts | ✅ Configured | $security_contexts resources |" >> dast-report.md
            runtime_score=$((runtime_score + 1))
          else
            echo "| Security Contexts | ⚠️ Missing | Add security contexts |" >> dast-report.md
          fi
          
          # Runtime Security Score
          runtime_percent=$((runtime_score * 100 / total_checks))
          if [ "$runtime_percent" -ge 60 ]; then
            echo "| **Runtime Security** | ✅ Good ($runtime_percent%) | $runtime_score/$total_checks |" >> dast-report.md
          else
            echo "| **Runtime Security** | ⚠️ Needs Improvement ($runtime_percent%) | $runtime_score/$total_checks |" >> dast-report.md
          fi

      - name: Upload DAST Report
        uses: actions/upload-artifact@v4
        with:
          name: dast-report
          path: dast-report.md

  pr-feedback:
    name: Generate PR Feedback
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [pipeline-init, code-quality, argocd-structure, sast-security, dast-security]
    steps:
      - name: Download All Reports
        uses: actions/download-artifact@v4
        with:
          path: reports

      - name: Generate Comprehensive PR Report
        run: |
          echo "# 🚀 ArgoCD Autopilot DevSecOps Validation Results" > pr-report.md
          echo "" >> pr-report.md
          
          # Pipeline Info
          if [ -f "reports/pipeline-info/pipeline-info.md" ]; then
            cat reports/pipeline-info/pipeline-info.md >> pr-report.md
            echo "" >> pr-report.md
          fi
          
          # Executive Summary
          echo "## 📊 Executive Summary" >> pr-report.md
          echo "" >> pr-report.md
          echo "| Validation Stage | Status | Score |" >> pr-report.md
          echo "|------------------|--------|-------|" >> pr-report.md
          
          # Check each report and extract status
          quality_status="❓ Unknown"
          structure_status="❓ Unknown"
          sast_status="❓ Unknown"
          dast_status="❓ Unknown"
          
          if [ -f "reports/quality-report/quality-report.md" ]; then
            if grep -q "❌" reports/quality-report/quality-report.md; then
              quality_status="❌ Issues Found"
            else
              quality_status="✅ Passed"
            fi
          fi
          
          if [ -f "reports/structure-report/structure-report.md" ]; then
            if grep -q "Good (" reports/structure-report/structure-report.md; then
              structure_status="✅ Passed"
            else
              structure_status="⚠️ Needs Attention"
            fi
          fi
          
          if [ -f "reports/sast-report/sast-report.md" ]; then
            if grep -q "Good (" reports/sast-report/sast-report.md; then
              sast_status="✅ Passed"
            else
              sast_status="⚠️ Issues Found"
            fi
          fi
          
          if [ -f "reports/dast-report/dast-report.md" ]; then
            if grep -q "Good (" reports/dast-report/dast-report.md; then
              dast_status="✅ Passed"
            else
              dast_status="⚠️ Needs Review"
            fi
          fi
          
          echo "| Code Quality | $quality_status | - |" >> pr-report.md
          echo "| ArgoCD Structure | $structure_status | - |" >> pr-report.md
          echo "| SAST Security | $sast_status | - |" >> pr-report.md
          echo "| DAST Security | $dast_status | - |" >> pr-report.md
          
          echo "" >> pr-report.md
          
          # Detailed Reports
          echo "## 📋 Detailed Reports" >> pr-report.md
          echo "" >> pr-report.md
          
          # Include each report
          for report in quality-report structure-report sast-report dast-report; do
            if [ -f "reports/$report/${report}.md" ]; then
              echo "<details>" >> pr-report.md
              echo "<summary>📄 ${report^}</summary>" >> pr-report.md
              echo "" >> pr-report.md
              cat "reports/$report/${report}.md" >> pr-report.md
              echo "" >> pr-report.md
              echo "</details>" >> pr-report.md
              echo "" >> pr-report.md
            fi
          done
          
          # Recommendations
          echo "## 🎯 Recommendations" >> pr-report.md
          echo "" >> pr-report.md
          
          if [[ "$quality_status" == *"Issues"* ]]; then
            echo "- 🔧 **Fix code quality issues**: Run \`yamllint --fix .\` and validate K8s manifests" >> pr-report.md
          fi
          
          if [[ "$structure_status" == *"Attention"* ]]; then
            echo "- 🏗️ **Complete ArgoCD structure**: Run \`argocd-autopilot repo bootstrap\`" >> pr-report.md
          fi
          
          if [[ "$sast_status" == *"Issues"* ]]; then
            echo "- 🔒 **Address security findings**: Review and remediate SAST security issues" >> pr-report.md
          fi
          
          if [[ "$dast_status" == *"Review"* ]]; then
            echo "- 🌐 **Enhance runtime security**: Implement network policies and security contexts" >> pr-report.md
          fi
          
          echo "" >> pr-report.md
          echo "---" >> pr-report.md
          echo "*Generated by ArgoCD Autopilot DevSecOps Pipeline v2.0*" >> pr-report.md

      - name: Post PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: pr-report.md
          header: "ArgoCD Autopilot DevSecOps Validation"

  pipeline-summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [dast-security]
    if: always()
    steps:
      - name: Generate Pipeline Summary
        run: |
          echo "## 🎉 ArgoCD Autopilot DevSecOps Pipeline Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Pipeline Stages:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Pipeline Initialization** - Completed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Code Quality & Linting** - Completed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **ArgoCD Structure Validation** - Completed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **SAST Security Analysis** - Completed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **DAST Security Analysis** - Completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔒 Security Coverage:" >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 **Static Analysis**: Code vulnerabilities, IaC misconfigurations, secrets" >> $GITHUB_STEP_SUMMARY
          echo "- 🌐 **Runtime Analysis**: Service exposure, TLS, RBAC, network policies" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 **Dependencies**: Vulnerability scanning for all package managers" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Review validation results in PR comments" >> $GITHUB_STEP_SUMMARY
          echo "2. Address any security or quality issues" >> $GITHUB_STEP_SUMMARY
          echo "3. Re-run pipeline after fixes" >> $GITHUB_STEP_SUMMARY
          echo "4. Deploy to ArgoCD cluster when all checks pass" >> $GITHUB_STEP_SUMMARY