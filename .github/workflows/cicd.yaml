name: ArgoCD Autopilot Validation Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  pull-requests: write
  checks: write

env:
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

jobs:
  source-trigger:
    name: Source and Trigger
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.branch-info.outputs.branch }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Output Trigger Info
        id: branch-info
        run: |
          echo "branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          echo "### 🔄 ArgoCD Autopilot Validation Trigger" > trigger.md
          echo '```' >> trigger.md
          echo "Triggered by: ${{ github.event_name }}" >> trigger.md
          echo "Branch: ${{ github.ref }}" >> trigger.md
          echo "Repository: ArgoCD Autopilot Configuration" >> trigger.md
          echo '```' >> trigger.md

      - name: Upload trigger report
        uses: actions/upload-artifact@v4
        with:
          name: trigger-report
          path: trigger.md

  validate-manifests:
    name: Validate Kubernetes Manifests
    runs-on: ubuntu-latest
    needs: source-trigger
    steps:
      - uses: actions/checkout@v4

      - name: Install kubectl and validation tools
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/
          
          # Install kubeval for manifest validation
          wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
          tar xf kubeval-linux-amd64.tar.gz
          chmod +x kubeval && sudo mv kubeval /usr/local/bin/

      - name: Validate ArgoCD Applications
        run: |
          echo "### ⚙️ Kubernetes Manifest Validation" > validation.md
          echo '```' >> validation.md
          echo "🔹 Validating ArgoCD Applications..." >> validation.md
          
          # Find and validate all YAML files
          find . -name "*.yaml" -o -name "*.yml" | while read file; do
            echo "Validating: $file" >> validation.md
            kubeval "$file" >> validation.md 2>&1 || echo "Issues found in $file" >> validation.md
          done
          
          echo "🔹 Checking ArgoCD Application syntax..." >> validation.md
          find . -name "*app*.yaml" | while read app; do
            echo "Checking ArgoCD app: $app" >> validation.md
            kubectl apply --dry-run=client -f "$app" >> validation.md 2>&1 || echo "Syntax error in $app" >> validation.md
          done
          
          echo "✅ Manifest validation complete" >> validation.md
          echo '```' >> validation.md

      - name: Upload validation report
        uses: actions/upload-artifact@v4
        with:
          name: validation-report
          path: validation.md

  lint-yaml:
    name: YAML Linting and Formatting
    runs-on: ubuntu-latest
    needs: validate-manifests
    steps:
      - uses: actions/checkout@v4

      - name: Install yamllint
        run: |
          pip install yamllint

      - name: Lint YAML files
        run: |
          echo "### 🧹 YAML Linting" > lint.md
          echo '```' >> lint.md
          echo "🔹 Running yamllint on all YAML files..." >> lint.md
          
          find . -name "*.yaml" -o -name "*.yml" | while read file; do
            echo "Linting: $file" >> lint.md
            yamllint "$file" >> lint.md 2>&1 || echo "Linting issues in $file" >> lint.md
          done
          
          echo "✅ YAML linting complete" >> lint.md
          echo '```' >> lint.md

      - name: Upload lint report
        uses: actions/upload-artifact@v4
        with:
          name: lint-report
          path: lint.md

  validate-structure:
    name: Validate ArgoCD Autopilot Structure
    runs-on: ubuntu-latest
    needs: lint-yaml
    steps:
      - uses: actions/checkout@v4

      - name: Validate Autopilot Structure
        run: |
          echo "### 🏗️ ArgoCD Autopilot Structure Validation" > structure.md
          echo '```' >> structure.md
          echo "🔹 Checking required directories..." >> structure.md
          
          # Check for required Autopilot structure
          [ -d "bootstrap" ] && echo "✅ bootstrap/ directory exists" >> structure.md || echo "❌ bootstrap/ directory missing" >> structure.md
          [ -d "bootstrap/cluster-resources" ] && echo "✅ cluster-resources/ directory exists" >> structure.md || echo "❌ cluster-resources/ missing" >> structure.md
          [ -d "bootstrap/cluster-resources/in-cluster" ] && echo "✅ in-cluster/ directory exists" >> structure.md || echo "❌ in-cluster/ missing" >> structure.md
          
          echo "🔹 Checking for applications..." >> structure.md
          find bootstrap/cluster-resources/in-cluster -name "*.yaml" -o -name "*.yml" 2>/dev/null | while read app; do
            echo "Found application config: $app" >> structure.md
          done || echo "No application configs found" >> structure.md
          
          echo "🔹 Validating kustomization files..." >> structure.md
          find . -name "kustomization.yaml" 2>/dev/null | while read kust; do
            echo "Validating kustomization: $kust" >> structure.md
            kubectl apply --dry-run=client -k "$(dirname "$kust")" >> structure.md 2>&1 || echo "Kustomization error in $kust" >> structure.md
          done || echo "No kustomization files found" >> structure.md
          
          echo "✅ Structure validation complete" >> structure.md
          echo '```' >> structure.md

      - name: Upload structure report
        uses: actions/upload-artifact@v4
        with:
          name: structure-report
          path: structure.md

  post-pr-comments:
    name: Post PR Comments
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [source-trigger, validate-manifests, lint-yaml, validate-structure]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: reports

      - name: Create Combined PR Report
        run: |
          echo "## 🔄 ArgoCD Autopilot Validation Results" > combined-report.md
          echo "" >> combined-report.md
          
          # Add trigger info
          if [ -f "reports/trigger-report/trigger.md" ]; then
            cat reports/trigger-report/trigger.md >> combined-report.md
            echo "" >> combined-report.md
          fi
          
          # Add validation results
          if [ -f "reports/validation-report/validation.md" ]; then
            cat reports/validation-report/validation.md >> combined-report.md
            echo "" >> combined-report.md
          fi
          
          # Add lint results
          if [ -f "reports/lint-report/lint.md" ]; then
            cat reports/lint-report/lint.md >> combined-report.md
            echo "" >> combined-report.md
          fi
          
          # Add structure validation
          if [ -f "reports/structure-report/structure.md" ]; then
            cat reports/structure-report/structure.md >> combined-report.md
            echo "" >> combined-report.md
          fi
          
          # Add summary
          echo "## 📋 Summary" >> combined-report.md
          echo "✅ **Kubernetes manifest validation** - Completed" >> combined-report.md
          echo "✅ **YAML linting and formatting** - Completed" >> combined-report.md
          echo "✅ **ArgoCD Autopilot structure validation** - Completed" >> combined-report.md
          echo "" >> combined-report.md
          echo "🚀 **Status:** Ready for ArgoCD cluster application!" >> combined-report.md

      - name: Post Combined Report
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: combined-report.md
          header: "ArgoCD Autopilot Validation"

  notify-validation-complete:
    name: Notify Validation Complete
    runs-on: ubuntu-latest
    needs: validate-structure
    steps:
      - name: Create validation summary
        run: |
          echo "## 🎉 ArgoCD Autopilot Validation Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ All Checks Passed:" >> $GITHUB_STEP_SUMMARY
          echo "- Kubernetes manifest validation" >> $GITHUB_STEP_SUMMARY
          echo "- YAML linting and formatting" >> $GITHUB_STEP_SUMMARY
          echo "- ArgoCD Autopilot structure validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Ready for ArgoCD:" >> $GITHUB_STEP_SUMMARY
          echo "Your ArgoCD Autopilot configuration is validated and ready to be applied to the cluster!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Configuration Repository:" >> $GITHUB_STEP_SUMMARY
          echo "This is a configuration-only repository. No container images need to be built or deployed." >> $GITHUB_STEP_SUMMARY